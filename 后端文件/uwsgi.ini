[uwsgi]
### Django-related settings

# socket = :8000  # 如果需要配置nginx，则需要此项
http = :8080

# the base directory (full path)
# 项目路径，项目的根目录
chdir = D:\Desktop\git_clong\后端文件

# Django's wsgi file
# 配置项目路径，项目的所在目录
module=toolManagement.wsgi

# the virtualenv (full path)
# 虚拟环境。注意这里不是env，而是home
home = /opt/homebrew/bin


### process-related settings

# maximum number of worker processes
# 最大进程个数
# 同时启动uwsgi进程的个数，这个进程与nginx中的workers是不一样的，
# uwsgi中的每个进程每次只能处理一个请求(进程越多可以同时处理的请求越多)，
# nginx采用的异步非阻塞的方式来处理请求的，每个进程可以接受处理多个请求。
processes = 10
# 每个进程的线程数
threads = 4

# 启动一个主进程来管理其他进程，processes的进程都是这个master进程的子进程，如果kill这个master进程，相当于杀死所有的uwsgi进程
master = true

# 允许用内嵌的语言启动线程。这将允许你在app程序中产生一个子线程
enable-threads=true

# clear environment on exit
#当服务器退出的时候自动删除unix socket文件status和pid文件
vacuum = true

# 设置日志目录
daemonize = %(chdir)/uwsgi.log

# 设置最大日志文件大小
log-maxsize = 5000000 

# 设置用于uwsgi包解析的内部缓存区大小为64k。默认是4k。
buffer-size = 32768

# 为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）。你可以使用这个选项来默默地对抗内存泄漏
max-requests = 5000 

# 通过使用POSIX/UNIX的setrlimit()函数来限制每个uWSGI进程的虚拟内存使用数。这个配置会限制uWSGI的进程占用虚拟内存不超过256M。如果虚拟内存已经达到256M，并继续申请虚拟内存则会使程序报内存错误，本次的http请求将返回500错误。
# limit-as = 256 

# 一个请求花费的时间超过了这个harakiri超时时间，那么这个请求都会被丢弃，并且当前处理这个请求的工作进程会被回收再利用（即重启）
http-timeout = 500
harakiri = 500

# uwsgi.pid文件用来重启和停止uwsgi服务
pidfile = %(chdir)/uwsgi/uwsgi.pid